---

- name: Set EC2 metadata facts
  amazon.aws.ec2_metadata_facts:

- name: Set host facts for passwd database
  ansible.builtin.getent:
    database: passwd

- name: Check required variables are set
  ansible.builtin.assert:
    that:
      - environment_name is defined and environment_name | trim | length > 0
    msg: "Required variable(s) empty or undefined"

- name: Set CloudWatch agent facts for config population
  ansible.builtin.set_fact:
    cloudwatch_agent: "{{ cloudwatch_agent_defaults | combine(cloudwatch_agent_overrides | default({})) }}"
    cloudwatch_log_stream_name: "{{ ansible_ec2_instance_id }}_{{ ansible_ec2_hostname }}"
    region: "{{ ansible_ec2_instance_identity_document_region }}"

- name: Create CloudWatch agent primary configuration file
  ansible.builtin.template:
    src: templates/cloudwatch-config.json.j2
    dest: "{{ cloudwatch_agent.config_dir }}/cloudwatch-config.json"
    owner: cwagent
    group: cwagent
    mode: '0644'
    trim_blocks: false

- name: Start CloudWatch agent using primary configuration file
  ansible.builtin.command:
    cmd: "{{ cloudwatch_agent.path }} -a fetch-config -m ec2 -s -c file:{{ cloudwatch_agent.config_dir }}/cloudwatch-config.json"
  changed_when: true

- name: Create shared log rotation configuration for Tuxedo services
  ansible.builtin.template:
    src: templates/logrotate.dps.conf.j2
    dest: "{{ dps_log_rotation_config_path }}"
    owner: root
    group: root
    mode: '0644'

- name: Configure cron jobs
  ansible.builtin.import_tasks: cron.yml

- name: Allow logrotate to modify CloudWatch logs
  community.general.sefcontext:
    target: '/opt/aws/amazon-cloudwatch-agent/logs(/.*)?'
    setype: var_log_t
    state: present

- name: Update SELinux security context
  ansible.builtin.command: "restorecon -irv /opt/aws/amazon-cloudwatch-agent/logs"
  register: cloudwatch_logs_selinux_context
  changed_when: cloudwatch_logs_selinux_context.stdout != ""

- name: Install system tooling
  ansible.builtin.import_tasks: tools.yml

- name: Add host entry for SQL client connectivity
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "127.0.0.1   {{ ansible_facts.hostname }}"

- name: Find application-specific CloudWatch configuration files
  ansible.builtin.find:
    paths: "{{ cloudwatch_agent.config_dir }}"
    patterns: 'cloudwatch-config-*.json'
  register: cloudwatch_configs

- name: Add configuration for DPS services to CloudWatch agent
  ansible.builtin.command:
    cmd: "{{ cloudwatch_agent.path }} -a append-config -m ec2 -s -c file:{{ item.path }}"
  loop: "{{ cloudwatch_configs.files }}"
  changed_when: true
